{"version":3,"file":"component---src-templates-tags-js-20b899ed7f1ec20cc99f.js","mappings":"uJA+BA,IA5BeA,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAC3C,MACMI,EADY,MACCH,EAASI,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEAG,EAAAA,cAAA,MAAIC,UAAU,gBACZD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAKR,IAKhBK,EAAAA,cAACE,EAAAA,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCR,GAMLK,EAAAA,cAAA,OAAKC,UAAU,iBAAiB,oBAAmBJ,GACjDG,EAAAA,cAAA,UAAQC,UAAU,iBAAiBF,GACnCC,EAAAA,cAAA,YAAOJ,GACPI,EAAAA,cAAA,cAAQ,MAAG,IAAII,MAAOC,cAAc,mBAChC,C,gECgDV,UArEaZ,IAAsD,IAArD,YAAEa,EAAW,KAAEC,EAAI,SAAEb,EAAUa,MAAM,KAAEC,IAAQf,EAC3D,MAAM,IAAEgB,GAAQH,GACV,MAAEI,EAAK,WAAEC,GAAeJ,EAAKK,kBAC7BC,EAAa,GAAEF,SACJ,IAAfA,EAAmB,GAAK,oBAGpBG,EAAYN,EAAKO,aAAapB,MAEpC,OACEK,EAAAA,cAACgB,EAAAA,EAAM,CAACtB,SAAUA,EAAUC,MAAOmB,GACjCd,EAAAA,cAAA,UACGa,EACDb,EAAAA,cAAA,WAAM,IAAES,EAAI,KAEdT,EAAAA,cAAA,UACGU,EAAMO,KAAIC,IAAqB,IAAlBC,KAAMC,GAAMF,EACxB,OACElB,EAAAA,cAAA,MAAIqB,IAAKD,EAAKE,OAAOC,MACnBvB,EAAAA,cAAA,WACEC,UAAU,iBACVuB,WAAS,EACTC,SAAS,6BAETzB,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAIiB,EAAKE,OAAOC,KAAMG,SAAS,OACnC1B,EAAAA,cAAA,QAAM0B,SAAS,YAAYN,EAAKO,YAAYhC,SAGhDK,EAAAA,cAAA,aAAQoB,EAAKO,YAAYC,QAG1B,KAQX5B,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,SAAQ,YACV,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>Â© {new Date().getFullYear()}, Built with ðŸ–¤</footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data, location, data: { site } }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with: `\n\n  const siteTitle = site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>\n        {tagHeader}\n        <br />\"{tag}\"\n      </h1>\n      <ul>\n        {edges.map(({ node: post }) => {\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{post.frontmatter.title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n              </article>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n          This links to a page that does not yet exist.\n          You'll come back to it!\n      */}\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","header","React","className","Link","to","Date","getFullYear","pageContext","data","site","tag","edges","totalCount","allMarkdownRemark","tagHeader","siteTitle","siteMetadata","Layout","map","_ref2","node","post","key","fields","slug","itemScope","itemType","itemProp","frontmatter","date"],"sourceRoot":""}